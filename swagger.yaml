openapi: 3.0.3
info:
  title: Book Review API
  description: This is a Book Review API
  version: 1.0.0
tags:
  - name: book
    description: The books managing API
  - name: review
    description: Access to book review
  - name: user
    description: Operations about user
paths:
  /book:
    get:
      tags:
      - book
      summary: List all the books
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '422':
          description: Validation exception
    post:
      tags: 
        - book
      summary: Create a new book
      description: Add a new book
      operationId: addBook
      requestBody:
        description: Book object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
          application/xml:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        '201':
          description: Book created successfully
          headers:
            Location:
              description: URL of the newly created book
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid input
        '422':
          description: Validation exception
  /book/{bookId}:    
    get:
      tags:
        - book
      summary: Get the book by ID
      description: Return a single book
      operationId: getBookById
      parameters:
      - name: bookId
        in: path
        description: ID of book to return
        required: true
        schema:
          type: integer
          format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
      security:
        - api_key: []
        - books_auth:
            - write:books
            - read:books
    put:
      tags:
        - book
      summary: Update the book by ID
      description: Update the details (title and/or author) of a specific book
      operationId: updateBookById
      parameters:
        - name: bookId
          in: path
          description: ID of the book to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Book object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The new title of the book
                  example: "Advanced JavaScript"
                author:
                  type: string
                  description: The new author of the book
                  example: "J. K. Rowling"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Book'
            application/xml:
              schema:
                $ref: '#/components/schemas/Book'
        '400':
          description: Invalid ID supplied or invalid input
        '404':
          description: Book not found
        '422':
          description: Validation exception
      security:
        - api_key: []
        - books_auth:
            - write:books
            - read:books
    delete:
      tags:
        - book
      summary: Remove the book by Id
      description: delete a book
      parameters:
        - name: api_key
          in: header
          description: ''
          required: false
          schema:
            type: string
        - name: bookId
          in: path
          description: Book id to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid book value
      security:
        - api_key: []
        - books_auth:
            - write:books
            - read:books
  /user:
    get:
      tags:
      - user
      summary: List all the users
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid ID supplied
        '404':
          description: Book not found
        '422':
          description: Validation exception
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: Delete existent user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /review:
    get:
      tags:
      - review
      summary: List all the reviews
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid ID supplied
        '404':
          description: Review not found
        '422':
          description: Validation exception
    post:
      tags:
        - review
      summary: Create a review
      description: Add a new review for a book
      operationId: createReview
      requestBody:
        description: Review object that needs to be added
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/xml:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid input
  /review/{id}:
    get:
      tags:
        - review
      summary: Get a review by ID
      description: Retrieve a single review by its ID
      operationId: getReviewById
      parameters:
        - name: id
          in: path
          description: ID of the review to retrieve
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '404':
          description: Review not found
    put:
      tags:
        - review
      summary: Update a review by ID
      description: Update the content or rating of a review by its ID
      operationId: updateReviewById
      parameters:
        - name: id
          in: path
          description: ID of the review to update
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        description: Review object that needs to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Review'
          application/xml:
            schema:
              $ref: '#/components/schemas/Review'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Review'
            application/xml:
              schema:
                $ref: '#/components/schemas/Review'
        '400':
          description: Invalid input
        '404':
          description: Review not found
    delete:
      tags:
        - review
      summary: Delete a review by ID
      description: Remove a review by its ID
      operationId: deleteReviewById
      parameters:
        - name: id
          in: path
          description: ID of the review to delete
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '204':
          description: Review deleted successfully
        '404':
          description: Review not found    
components:
  schemas:
    Book: 
      required:
        - title
        - author
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: Intro to JavaScript
        author:
          type: string
          example: JK Rowling
      xml:
        name: book
    User:
      type: object
      properties:
        username:
          type: string
          example: farah
        email:
          type: string
          example: farah.wan@goacademyai.com
        password:
          type: string
          example: '123'
      xml:
        name: user
    Review:
      required:
        - content
        - rating
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        bookId:
          type: integer
          format: int64
          example: 1
        userId:
          type: string
          example: farah
        content:
          type: string
          example: Good reading!
        rating:
          type: integer
          example: 5
      xml:
        name: review
  requestBodies:
    Book:
      description: Book object that needs to be added
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Book'
        application/xml:
          schema:
            $ref: '#/components/schemas/Book'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    books_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://bookstore3.swagger.io/oauth/authorize
          scopes:
            write:books: modify books in your account
            read:books: read your books
    api_key:
      type: apiKey
      name: api_key
      in: header